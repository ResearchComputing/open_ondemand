#!/usr/bin/bash -l
export PATH=$PATH:/curc/sw/install/vscode/<%= context.version %>/code-server-<%= context.version %>-linux-amd64/bin

<%

# Set our working directory.
#working_dir = Pathname.new(context.working_dir)

working_dir = "/projects/$USER"

code_server_version   = context.version

# Ensure that code-server always starts up in either a user defined directory or the home directory.
#if ! working_dir.exist?
#    working_dir = Pathname.new(ENV['HOME'])
#elsif working_dir.file?
#    working_dir = working_dir.parent
#end
%>

CODE_SERVER_DATAROOT="/projects/$USER/code-server"
mkdir -p "$CODE_SERVER_DATAROOT/extensions"
mkdir -p "$CODE_SERVER_DATAROOT/tmp"

export TMPDIR=$CODE_SERVER_DATAROOT/tmp

# Expose the password to the server.
export PASSWORD="$password"

# Print compute node.
echo "$(date): Running on compute node ${compute_node}:$port"

CPP_FILE="<%= working_dir.to_s %>/code-server/.vscode/c_cpp_properties.json"

if [[ -f "$CPP_FILE" ]]; then
    CPP_DIR="${TMPDIR:=$CODE_SERVER_DATAROOT/tmp/$USER}/cpp-vscode"
    mkdir -p "$CPP_DIR"
    chmod 700 "$CPP_DIR"

    # if the file is empty, let's initialize it
    [ -s "$CPP_FILE" ] || echo '{"configurations": [{ "name": "Linux", "browse": { "databaseFilename": null }}], "version": 4}' > "$CPP_FILE"

    jq --arg dbfile "$CPP_DIR/cpp-vscode.db" \
      '.configurations[0].browse.databaseFilename = $dbfile' \
      "$CPP_FILE" > "$CPP_FILE".new

    mv "$CPP_FILE".new "$CPP_FILE"
  fi

# set up binds

module purge
module load git 
module list 

echo $PWD
echo "0.0.0.0:${port}"

cd /projects/$USER

#
# Start Code Server.
#
echo "$(date): Started code-server"
echo ""

code-server --auth=none --bind-addr="0.0.0.0:${port}" --disable-telemetry --user-data-dir="$CODE_SERVER_DATAROOT" --log=debug
